Implement your program in a file called whodunit.c in a directory called whodunit.

Your program should accept exactly two command-line arguments: the name of an input file to open for reading followed by the name of an output file to open for writing.

If your program is executed with fewer or more than two command-line arguments, it should remind the user of correct usage, as with  fprintf (to stderr), and main should return 1.

If the input file cannot be opened for reading, your program should inform the user as much, as with fprintf (to stderr), and main should return 2.

If the output file cannot be opened for writing, your program should inform the user as much, as with fprintf (to stderr), and main should return 3.

If the input file is not a 24-bit uncompressed BMP 4.0, your program should inform the user as much, as with fprintf (to stderr), and main should return 4.

Upon success, main should 0.

Yamaya:

Open infile and open and create the outfile
  From copy.c
    FILE *inptr = fopen("foo.bmp", "r");
      opens foo.bmp for reading

    FILE *outptr = fopen("bar.bmp", "w");
      Opens bar.bmp for writing

Update header's info for outfile
  Chec bmp.h

BITMAPINFOHEADER
  biWidth contains the width of the img in pixels not including padding
  biHeight contains the height in pixels not including padding
  biSizeImage contains the total size of the img in bytes including the padding and the pixels
BITMAPFILEHEADER
  bfSize contains the total size of the file on bytes the pixels the padding and the headers
    bf.bfSize = bi.biSizeImage +
            sizeof(BITMAPFILEHEADER) +
            sizeof(BITMAPINFOHEADER);

Read clue's scanline, pixel by pixel
 reading files
 fread(data, size, number, inptr);
  data: pointer to a struct(train!) that will contain the bytes you're reading
  size: size of each element to read
    sizeof()
  number: number of elements to read
  inptr: FILE * to read from

Change pixel's color as necessary
RGBTRIPLE
  struct to represent pixels
  // make a green pixel
  RGBTRIPLE triple;
  triple.rgbtBlue = 0x00;
  triple.rgbtGreen = 0xff;
  triple.rgbtRed = 0x00;

  if (triple.rgbtBlue == 0xff)
  {
      prinf("I'm blue!\n");
  }

  // change to pure blue
  triple.rgbtGreen = 0x00;
  triple.rgbtRed = 0x00;

write verdict's scanline, pixel by pixel
fwrite(data, size, nubmer, outptr);
  data: pointer to the struct that contains the bytes you're writing
  size
  number
  outptr: FILE * to write to
